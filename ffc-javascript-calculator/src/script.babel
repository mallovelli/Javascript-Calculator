const projectName = "Javascript calculator";
const nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];
const ops = ["/", "*", "-", "+"];
const ids = {
  7: "seven",
  8: "eight",
  9: "nine",
  4: "four",
  5: "five",
  6: "six",
  1: "one",
  2: "two",
  3: "three",
  0: "zero",
  "/": "divide",
  "*": "multiply",
  "-": "subtract",
  "+": "add"
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lastPressed: undefined,
      calc: "0",
      operation: undefined
    };
  }
  handleClick = (e) => {
    const { calc, lastPressed } = this.state;
    const { innerText } = e.target;

    switch (innerText) {
      case "AC": {
        this.setState({
          calc: "0"
        });
        break;
      }
      case "=": {
        const evaluated = eval(calc);
        this.setState({
          calc: evaluated
        });
        break;
      }
      case ".": {
        const splitted = calc.split(/[\+\-\*\/]/);
        const last = splitted.slice(-1)[0];
        if (!last.includes(".")) {
          this.setState({
            calc: calc + "."
          });
        }
        break;
      }

      default: {
        let e = undefined;
        // check for other op
        if (ops.includes(innerText)) {
          if (ops.includes(lastPressed) && innerText !== "-") {
            // oh boii...
            const lastNumberIdx = calc
              .split("")
              .reverse()
              .findIndex((char) => char !== " " && nums.includes(+char));
            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;
          } else {
            e = `${calc} ${innerText} `;
          }
        } else {
          e = calc === "0" ? innerText : calc + innerText;
        }

        this.setState({
          calc: e
        });
      }
    }

    this.setState({
      lastPressed: innerText
    });
  };

  render() {
    const { currentNumber, calc, operation } = this.state;
    return (
      <div className="calculator">
        <div id="display" className="display">
          {calc}

          {currentNumber}
        </div>
        <div className="num-container">
          <button id="clear" className="light-gray" onClick={this.handleClick}>
            AC
          </button>
          {nums.map((no) => (
            <button
              className="dark-gray"
              onClick={this.handleClick}
              key={no}
              id={ids[no]}
            >
              {no}
            </button>
          ))}
          <button className="orange" onClick={this.handleClick} id="decimal">
            .
          </button>
        </div>
        <div className="ops-container">
          {ops.map((op) => (
            <button
              className="orange"
              onClick={this.handleClick}
              key={op}
              id={ids[op]}
            >
              {op}
            </button>
          ))}
          <button className="orange" onClick={this.handleClick} id="equals">
            =
          </button>
        </div>
      </div>
    );
  }
}
ReactDOM.render(<App />, document.getElementById("app"));
